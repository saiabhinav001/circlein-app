'use client';

import { useState, useEffect } from 'react';
import { useSession } from 'next-auth/react';
import { useRouter } from 'next/navigation';
import { motion } from 'framer-motion';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { 
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from '@/components/ui/alert-dialog';
import { 
  Key,
  Users,
  UserPlus,
  Copy,
  CheckCircle,
  Plus,
  Settings,
  Trash2,
  AlertTriangle
} from 'lucide-react';
import { toast } from 'sonner';
import { collection, query, where, getDocs, doc, setDoc, serverTimestamp, deleteDoc } from 'firebase/firestore';
import { db } from '@/lib/firebase';

interface AccessCode {
  id: string;
  communityId: string;
  isUsed: boolean;
  usedBy?: string;
  usedAt?: any;
  createdAt: any;
  type: string;
  description?: string;
}

interface User {
  id: string;
  name: string;
  email: string;
  role: string;
  communityId: string;
  createdAt: any;
  lastLogin: any;
}

export default function ManageUsers() {
  const { data: session, status } = useSession();
  const router = useRouter();
  const [accessCodes, setAccessCodes] = useState<AccessCode[]>([]);
  const [users, setUsers] = useState<User[]>([]);
  const [loading, setLoading] = useState(true);

  // Check admin access
  useEffect(() => {
    if (status === 'loading') return;
    
    if (!session?.user?.email || session.user.role !== 'admin') {
      router.push('/dashboard');
      return;
    }
    
    fetchUsersAndAccessCodes();
  }, [session, status, router]);

  const fetchUsersAndAccessCodes = async () => {
    try {
      if (!session?.user?.communityId) return;
      
      // Fetch access codes
      const accessCodesQuery = query(
        collection(db, 'accessCodes'),
        where('communityId', '==', session.user.communityId)
      );
      
      const accessCodesSnapshot = await getDocs(accessCodesQuery);
      const accessCodesData = accessCodesSnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data()
      } as AccessCode));
      
      setAccessCodes(accessCodesData);
      
      // Fetch users
      const usersQuery = query(
        collection(db, 'users'),
        where('communityId', '==', session.user.communityId)
      );
      
      const usersSnapshot = await getDocs(usersQuery);
      const usersData = usersSnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data()
      } as User));
      
      setUsers(usersData);
    } catch (error) {
      console.error('Error fetching users and access codes:', error);
      toast.error('Failed to load user data');
    } finally {
      setLoading(false);
    }
  };

  const generateAccessCode = async () => {
    try {
      if (!session?.user?.communityId) return;
      
      // Generate random access code
      const code = Math.random().toString(36).substr(2, 8).toUpperCase();
      
      await setDoc(doc(db, 'accessCodes', code), {
        communityId: session.user.communityId,
        isUsed: false,
        createdAt: serverTimestamp(),
        type: 'resident',
        description: `Generated by ${session.user.name || session.user.email}`
      });
      
      toast.success(`Access code ${code} generated successfully!`);
      fetchUsersAndAccessCodes();
    } catch (error) {
      console.error('Error generating access code:', error);
      toast.error('Failed to generate access code');
    }
  };

  const deleteAccessCode = async (codeId: string) => {
    try {
      const codeRef = doc(db, 'accessCodes', codeId);
      await deleteDoc(codeRef);
      toast.success('Access code deleted successfully!');
      fetchUsersAndAccessCodes();
    } catch (error) {
      console.error('Error deleting access code:', error);
      toast.error('Failed to delete access code');
    }
  };

  const deleteUser = async (userId: string, userEmail: string) => {
    try {
      // Show loading toast
      const loadingToast = toast.loading(`Deleting user ${userEmail} and all associated data...`);
      
      // Call comprehensive deletion API
      const response = await fetch('/api/admin/delete-resident', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          userId,
          userEmail
        }),
      });

      const data = await response.json();

      // Dismiss loading toast
      toast.dismiss(loadingToast);

      if (response.ok) {
        toast.success(
          `User deleted successfully! Removed ${data.deletedData.bookings} bookings and ${data.deletedData.notifications} notifications.`,
          { duration: 5000 }
        );
        fetchUsersAndAccessCodes();
      } else {
        toast.error(data.error || 'Failed to delete user');
      }
    } catch (error) {
      console.error('Error deleting user:', error);
      toast.error('Failed to delete user. Please try again.');
    }
  };

  const autoReplaceUsedCode = async (usedCodeId: string) => {
    try {
      const response = await fetch('/api/access-codes/auto-replace', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ usedCodeId }),
      });

      const data = await response.json();

      if (response.ok) {
        toast.success(`Used code deleted and new code ${data.newCode} generated!`);
        fetchUsersAndAccessCodes();
      } else {
        toast.error(data.error || 'Failed to replace access code');
      }
    } catch (error) {
      console.error('Error auto-replacing access code:', error);
      toast.error('Failed to replace access code');
    }
  };

  const copyToClipboard = (text: string) => {
    navigator.clipboard.writeText(text);
    toast.success('Copied to clipboard!');
  };

  if (status === 'loading' || loading) {
    return (
      <div className="min-h-screen bg-slate-50 dark:bg-slate-950 flex items-center justify-center">
        <div className="text-center">
          <div className="w-16 h-16 bg-gradient-to-br from-indigo-500 to-purple-600 rounded-2xl flex items-center justify-center mx-auto mb-4 animate-pulse">
            <Users className="w-8 h-8 text-white" />
          </div>
          <p className="text-slate-800 dark:text-slate-400">Loading user management...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-slate-50 dark:bg-slate-950 p-3 sm:p-4 md:p-6 lg:p-8">
      <div className="max-w-6xl mx-auto">
        {/* Header */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="mb-6 sm:mb-8"
        >
          <div className="flex flex-col sm:flex-row sm:justify-between sm:items-start gap-3 sm:gap-4">
            <div>
              <h1 className="text-2xl sm:text-3xl md:text-4xl font-bold bg-gradient-to-r from-indigo-500 to-purple-600 bg-clip-text text-transparent mb-1 sm:mb-2">
                Manage Users
              </h1>
              <p className="text-slate-800 dark:text-slate-400 text-sm sm:text-base md:text-lg">
                Handle access codes and community member registration
              </p>
            </div>
          </div>
        </motion.div>

        {/* Stats Cards */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.1 }}
          className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 sm:gap-5 md:gap-6 mb-6 sm:mb-8"
        >
          <Card>
            <CardContent className="p-4 sm:p-5 md:p-6">
              <div className="flex items-center">
                <Key className="w-6 h-6 sm:w-7 sm:h-7 md:w-8 md:h-8 text-blue-500 mr-2 sm:mr-3" />
                <div>
                  <p className="text-xs sm:text-sm font-medium text-slate-800 dark:text-slate-400">Total Access Codes</p>
                  <p className="text-xl sm:text-2xl font-bold">{accessCodes.length}</p>
                </div>
              </div>
            </CardContent>
          </Card>
          
          <Card>
            <CardContent className="p-4 sm:p-5 md:p-6">
              <div className="flex items-center">
                <CheckCircle className="w-6 h-6 sm:w-7 sm:h-7 md:w-8 md:h-8 text-green-500 mr-2 sm:mr-3" />
                <div>
                  <p className="text-xs sm:text-sm font-medium text-slate-800 dark:text-slate-400">Used Codes</p>
                  <p className="text-xl sm:text-2xl font-bold">{accessCodes.filter(code => code.isUsed).length}</p>
                </div>
              </div>
            </CardContent>
          </Card>
          
          <Card>
            <CardContent className="p-4 sm:p-5 md:p-6">
              <div className="flex items-center">
                <Users className="w-6 h-6 sm:w-7 sm:h-7 md:w-8 md:h-8 text-purple-500 mr-2 sm:mr-3" />
                <div>
                  <p className="text-xs sm:text-sm font-medium text-slate-800 dark:text-slate-400">Total Users</p>
                  <p className="text-xl sm:text-2xl font-bold">{users.length}</p>
                </div>
              </div>
            </CardContent>
          </Card>
        </motion.div>

        {/* Generate New Access Code */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.2 }}
          className="mb-6 sm:mb-8"
        >
          <Card>
            <CardHeader className="px-4 sm:px-6">
              <CardTitle className="flex items-center text-base sm:text-lg md:text-xl">
                <UserPlus className="w-4 h-4 sm:w-5 sm:h-5 mr-2" />
                Generate Access Code
              </CardTitle>
              <CardDescription className="text-xs sm:text-sm">
                Create a new access code for residents to join the community
              </CardDescription>
            </CardHeader>
            <CardContent className="px-4 sm:px-6">
              <Button onClick={generateAccessCode} className="w-full sm:w-auto bg-gradient-to-r from-indigo-500 to-purple-600 text-sm sm:text-base">
                <Plus className="w-4 h-4 mr-2" />
                Generate New Code
              </Button>
            </CardContent>
          </Card>
        </motion.div>

        {/* Access Codes List */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.3 }}
          className="mb-6 sm:mb-8"
        >
          <Card>
            <CardHeader className="px-4 sm:px-6">
              <CardTitle className="text-base sm:text-lg md:text-xl">Access Codes</CardTitle>
              <CardDescription className="text-xs sm:text-sm">
                Manage access codes for community registration
              </CardDescription>
            </CardHeader>
            <CardContent className="px-4 sm:px-6">
              <div className="space-y-2 sm:space-y-3">
                {accessCodes.map((code) => (
                  <div
                    key={code.id}
                    className={`p-3 sm:p-4 rounded-lg border-2 transition-all ${
                      code.isUsed
                        ? 'border-green-200 bg-green-50 dark:border-green-800 dark:bg-green-900/20'
                        : 'border-blue-200 bg-blue-50 dark:border-blue-800 dark:bg-blue-900/20'
                    }`}
                  >
                    <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-3">
                      <div className="flex items-center space-x-2 sm:space-x-3">
                        <div className={`p-1.5 sm:p-2 rounded-lg ${code.isUsed ? 'bg-green-100 dark:bg-green-800' : 'bg-blue-100 dark:bg-blue-800'}`}>
                          {code.isUsed ? (
                            <CheckCircle className="w-4 h-4 sm:w-5 sm:h-5 text-green-600 dark:text-green-400" />
                          ) : (
                            <Key className="w-4 h-4 sm:w-5 sm:h-5 text-blue-600 dark:text-blue-400" />
                          )}
                        </div>
                        <div className="min-w-0 flex-1">
                          <p className="font-mono text-base sm:text-lg font-bold truncate">{code.id}</p>
                          <p className="text-xs sm:text-sm text-slate-800 dark:text-slate-400 truncate">
                            {code.isUsed ? `Used by: ${code.usedBy}` : 'Available for use'}
                          </p>
                        </div>
                      </div>
                      <div className="flex flex-wrap items-center gap-2">
                        <Badge variant={code.isUsed ? "default" : "secondary"} className="text-xs">
                          {code.isUsed ? 'Used' : 'Available'}
                        </Badge>
                        {!code.isUsed && (
                          <Button
                            size="sm"
                            variant="outline"
                            onClick={() => copyToClipboard(code.id)}
                            className="text-xs sm:text-sm"
                          >
                            <Copy className="w-3 h-3 sm:w-4 sm:h-4" />
                          </Button>
                        )}
                        {code.isUsed ? (
                          <Button
                            size="sm"
                            variant="outline"
                            onClick={() => autoReplaceUsedCode(code.id)}
                            className="text-amber-600 hover:text-amber-700 hover:bg-amber-50 text-xs sm:text-sm"
                          >
                            <Plus className="w-3 h-3 sm:w-4 sm:h-4 mr-1" />
                            Replace
                          </Button>
                        ) : null}
                        <AlertDialog>
                          <AlertDialogTrigger asChild>
                            <Button
                              size="sm"
                              variant="outline"
                              className="text-red-600 hover:text-red-700 hover:bg-red-50 text-xs sm:text-sm"
                            >
                              <Trash2 className="w-3 h-3 sm:w-4 sm:h-4" />
                            </Button>
                          </AlertDialogTrigger>
                          <AlertDialogContent className="max-w-[90vw] sm:max-w-md">
                            <AlertDialogHeader>
                              <AlertDialogTitle className="text-base sm:text-lg">Delete Access Code</AlertDialogTitle>
                              <AlertDialogDescription className="text-xs sm:text-sm">
                                Are you sure you want to delete access code <strong>{code.id}</strong>? 
                                {code.isUsed ? ' This code has already been used.' : ' This code is still available for use.'}
                                <br />
                                <span className="text-red-600">This action cannot be undone.</span>
                              </AlertDialogDescription>
                            </AlertDialogHeader>
                            <AlertDialogFooter className="flex-col sm:flex-row gap-2">
                              <AlertDialogCancel className="w-full sm:w-auto text-xs sm:text-sm">Cancel</AlertDialogCancel>
                              <AlertDialogAction 
                                onClick={() => deleteAccessCode(code.id)}
                                className="w-full sm:w-auto bg-red-600 hover:bg-red-700 text-xs sm:text-sm"
                              >
                                Delete Code
                              </AlertDialogAction>
                            </AlertDialogFooter>
                          </AlertDialogContent>
                        </AlertDialog>
                      </div>
                    </div>
                  </div>
                ))}
                
                {accessCodes.length === 0 && (
                  <div className="text-center py-6 sm:py-8">
                    <Key className="w-12 h-12 sm:w-16 sm:h-16 text-slate-400 mx-auto mb-3 sm:mb-4" />
                    <h3 className="text-lg sm:text-xl font-semibold mb-2">No Access Codes</h3>
                    <p className="text-slate-800 dark:text-slate-400 text-sm sm:text-base mb-3 sm:mb-4">
                      Generate your first access code to allow residents to join.
                    </p>
                  </div>
                )}
              </div>
            </CardContent>
          </Card>
        </motion.div>

        {/* Users List */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.4 }}
        >
          <Card>
            <CardHeader className="px-4 sm:px-6">
              <CardTitle className="text-base sm:text-lg md:text-xl">Community Users</CardTitle>
              <CardDescription className="text-xs sm:text-sm">
                All registered users in your community
              </CardDescription>
            </CardHeader>
            <CardContent className="px-4 sm:px-6">
              <div className="space-y-2 sm:space-y-3">
                {users.map((user) => (
                  <div
                    key={user.id}
                    className="p-3 sm:p-4 rounded-lg border bg-white dark:bg-slate-800 hover:shadow-md transition-all"
                  >
                    <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-3">
                      <div className="flex items-center space-x-2 sm:space-x-3 min-w-0 flex-1">
                        <div className="w-8 h-8 sm:w-10 sm:h-10 bg-gradient-to-br from-indigo-500 to-purple-600 rounded-full flex items-center justify-center flex-shrink-0">
                          <span className="text-white font-bold text-sm sm:text-base">
                            {user.name?.charAt(0) || user.email.charAt(0).toUpperCase()}
                          </span>
                        </div>
                        <div className="min-w-0 flex-1">
                          <p className="font-semibold text-sm sm:text-base truncate">{user.name || 'No name set'}</p>
                          <p className="text-xs sm:text-sm text-slate-800 dark:text-slate-400 truncate">{user.email}</p>
                        </div>
                      </div>
                      <div className="flex flex-wrap items-center gap-2">
                        <Badge variant={user.role === 'admin' ? 'default' : 'secondary'} className="text-xs">
                          {user.role}
                        </Badge>
                        <p className="text-xs sm:text-sm text-slate-700 whitespace-nowrap">
                          Joined {user.createdAt?.toDate?.()?.toLocaleDateString() || 'Unknown'}
                        </p>
                        {user.role !== 'admin' && (
                          <AlertDialog>
                            <AlertDialogTrigger asChild>
                              <Button
                                size="sm"
                                variant="outline"
                                className="text-red-600 hover:text-red-700 hover:bg-red-50 text-xs sm:text-sm"
                              >
                                <Trash2 className="w-3 h-3 sm:w-4 sm:h-4" />
                              </Button>
                            </AlertDialogTrigger>
                            <AlertDialogContent className="max-w-[90vw] sm:max-w-md">
                              <AlertDialogHeader>
                                <AlertDialogTitle className="text-base sm:text-lg flex items-center gap-2">
                                  <AlertTriangle className="w-5 h-5 text-red-600" />
                                  Delete User - Permanent Action
                                </AlertDialogTitle>
                                <AlertDialogDescription className="text-xs sm:text-sm space-y-2">
                                  <div>
                                    Are you sure you want to delete <strong>{user.name || user.email}</strong>?
                                  </div>
                                  <div className="text-red-600 font-semibold">
                                    This will permanently delete:
                                  </div>
                                  <ul className="list-disc list-inside space-y-1 text-xs">
                                    <li>User account and profile</li>
                                    <li>All booking history (past & future)</li>
                                    <li>All notifications</li>
                                    <li>Session data (forces sign-out)</li>
                                  </ul>
                                  <div className="text-red-600 font-bold pt-2">
                                    ⚠️ This action cannot be undone!
                                  </div>
                                </AlertDialogDescription>
                              </AlertDialogHeader>
                              <AlertDialogFooter className="flex-col sm:flex-row gap-2">
                                <AlertDialogCancel className="w-full sm:w-auto text-xs sm:text-sm">Cancel</AlertDialogCancel>
                                <AlertDialogAction 
                                  onClick={() => deleteUser(user.id, user.email)}
                                  className="w-full sm:w-auto bg-red-600 hover:bg-red-700 text-xs sm:text-sm"
                                >
                                  <Trash2 className="w-3 h-3 mr-1" />
                                  Delete Permanently
                                </AlertDialogAction>
                              </AlertDialogFooter>
                            </AlertDialogContent>
                          </AlertDialog>
                        )}
                      </div>
                    </div>
                  </div>
                ))}
                
                {users.length === 0 && (
                  <div className="text-center py-6 sm:py-8">
                    <Users className="w-12 h-12 sm:w-16 sm:h-16 text-slate-400 mx-auto mb-3 sm:mb-4" />
                    <h3 className="text-lg sm:text-xl font-semibold mb-2">No Users Yet</h3>
                    <p className="text-slate-800 dark:text-slate-400 text-sm sm:text-base">
                      Users will appear here once they register with access codes.
                    </p>
                  </div>
                )}
              </div>
            </CardContent>
          </Card>
        </motion.div>
      </div>
    </div>
  );
}