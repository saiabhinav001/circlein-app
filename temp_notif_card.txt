const NotificationCard: React.FC<NotificationCardProps> = ({
  notification,
  removeNotification,
  markAsRead,
  getPriorityColor,
  getNotificationIcon,
  formatTimeAgo,
  router,
  setIsOpen
}) => {
  return (
    <div className="notification-card-wrapper relative group" style={{ isolation: 'isolate' }}>
      {/* ULTRA SIMPLE Delete button - ZERO complexity */}
      <div
        onClick={(e) => {
          e.stopPropagation();
          console.log('�️ DELETING:', notification.id);
          removeNotification(notification.id);
        }}
        className="absolute top-3 right-3 z-[999999] p-2.5 rounded-full bg-white dark:bg-gray-800 border-2 border-gray-300 dark:border-gray-600 hover:bg-red-500 hover:border-red-500 dark:hover:bg-red-600 shadow-lg"
        style={{ 
          pointerEvents: 'auto',
          cursor: 'pointer',
          transition: 'background-color 0.15s ease, border-color 0.15s ease'
        }}
      >
        <X className="h-4 w-4 text-gray-600" strokeWidth={2.5} style={{ pointerEvents: 'none' }} />
      </div>

      {/* Clickable notification card */}
      <div
        className={cn(
          "p-4 sm:p-5 pr-14 cursor-pointer transition-all duration-300 relative",
          "hover:shadow-lg hover:bg-blue-50/50 dark:hover:bg-blue-900/20",
          !notification.read && "bg-gradient-to-r from-blue-50/80 to-indigo-50/80 dark:from-blue-900/20 dark:to-indigo-900/20"
        )}
        onClick={(e) => {
          console.log('📋 Card clicked');
          if (!notification.read) markAsRead(notification.id);
          if (notification.actionUrl) {
            router.push(notification.actionUrl);
            setIsOpen(false);
          }
        }}
      >
        {/* Enhanced Priority indicator */}
        {!notification.read && (
          <div
            className={cn(
              "absolute left-0 top-0 bottom-0 w-1 bg-gradient-to-b rounded-r-full",
              getPriorityColor(notification.priority)
            )}
          />
        )}

        {/* Hover effect overlay */}
        <div
          className="absolute inset-0 bg-gradient-to-r from-blue-500/5 to-purple-500/5 opacity-0 group-hover:opacity-100 transition-opacity duration-300 pointer-events-none"
        />

        <div className="flex items-start gap-3 sm:gap-4 relative z-10">
          {/* Enhanced Icon */}
          <div
            className={cn(
              "flex-shrink-0 w-11 h-11 sm:w-12 sm:h-12 rounded-xl flex items-center justify-center text-white shadow-lg bg-gradient-to-br relative overflow-hidden transition-transform hover:scale-105",
              getPriorityColor(notification.priority)
            )}
          >
            {getNotificationIcon(notification)}
          </div>

          <div className="flex-1 min-w-0">
            <div className="flex items-start justify-between gap-2 mb-2">
              <div className="flex-1 min-w-0">
                <h4 className="font-semibold text-sm sm:text-base leading-tight line-clamp-2 text-gray-900 dark:text-white">
                  {notification.title}
                  {!notification.read && (
                    <span className="ml-2 inline-block w-2 h-2 bg-blue-500 rounded-full animate-pulse" />
                  )}
                </h4>
              </div>
              
              <div className="flex items-center gap-2 flex-shrink-0">
                <span className="text-xs font-medium whitespace-nowrap text-gray-500 dark:text-gray-300">
                  {formatTimeAgo(new Date(notification.timestamp))}
                </span>
              </div>
            </div>
            
            <p className="text-sm line-clamp-2 leading-relaxed mb-3 text-gray-700 dark:text-gray-300">
              {notification.message}
            </p>

            {/* Action button if available */}
            {notification.actionLabel && (
              <button
                className="px-3 py-1.5 bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700 text-white text-xs font-semibold rounded-lg transition-all duration-200 shadow-md hover:scale-105 active:scale-95"
              >
                {notification.actionLabel}
              </button>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export function NotificationProvider({ children }: { children: React.ReactNode }) {
