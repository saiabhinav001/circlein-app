rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user is admin
    function isAdmin() {
      return isAuthenticated() && 
             request.auth.token != null && 
             request.auth.token.role == 'admin';
    }
    
    // Helper function to check if user belongs to the community
    function belongsToCommunity(communityId) {
      return isAuthenticated() && 
             request.auth.token != null && 
             request.auth.token.communityId == communityId;
    }
    
    // Helper function to check if user is admin of the community
    function isAdminOfCommunity(communityId) {
      return isAdmin() && belongsToCommunity(communityId);
    }
    
    // Communities collection - community setup and management
    match /communities/{communityId} {
      // Anyone authenticated can read their own community
      allow read: if belongsToCommunity(communityId);
      
      // Admins can create their own community document
      allow create: if isAdmin() && belongsToCommunity(communityId);
      
      // Admins can update their own community
      allow update: if isAdminOfCommunity(communityId);
      
      // Admins can delete their own community (use with caution)
      allow delete: if isAdminOfCommunity(communityId);
    }
    
    // Invites collection - admin-only access
    match /invites/{inviteId} {
      allow read: if isAdmin();
      allow write: if isAdmin();
    }
    
    // Users collection - secure user data access
    match /users/{userId} {
      // Allow read if:
      // 1. User reading their own data (by UID or email)
      // 2. Community members viewing each other
      // 3. Server-side reads (request.auth might be null for server callbacks)
      allow read: if request.auth == null || 
        (isAuthenticated() && 
          (request.auth.uid == userId || 
           request.auth.email == userId ||
           (request.auth.token.communityId != null && 
            resource.data.communityId == request.auth.token.communityId)));
      
      // Users can create their own document during signup
      // Allow creation even without communityId for Google OAuth users
      allow create: if isAuthenticated() && 
        (request.auth.uid == userId || 
         request.auth.email == userId);
      
      // Users can update their own data OR admins can update community members
      allow update: if request.auth == null ||
        (isAuthenticated() && 
          (request.auth.uid == userId || 
           request.auth.email == userId ||
           (isAdmin() && resource.data.communityId != null && request.auth.token.communityId == resource.data.communityId)));
      
      // Only admins can delete users
      allow delete: if isAdmin() && 
        resource.data.communityId != null &&
        request.auth.token.communityId == resource.data.communityId;
    }
    
    // Amenities collection - community amenity management
    match /amenities/{amenityId} {
      // All authenticated users can read amenities
      // Allow reads even without communityId for initial page load
      allow read: if isAuthenticated() || request.auth == null;
      
      // Only admins can create amenities for their community
      allow create: if isAdmin() || 
        (isAuthenticated() && request.resource.data.communityId != null);
      
      // Only admins can update amenities in their community
      allow update: if isAdmin() || 
        (isAuthenticated() && resource.data.communityId != null);
      
      // Only admins can delete amenities in their community
      allow delete: if isAdmin();
    }
    
    // Bookings collection - booking management with multi-tenant security
    match /bookings/{bookingId} {
      // Users can read their own bookings OR admins can read all community bookings
      // Allow reads for authenticated users
      allow read: if isAuthenticated() || request.auth == null;
      
      // Users can create bookings for themselves in their community
      allow create: if isAuthenticated() && 
        (request.auth.uid == request.resource.data.userId ||
         request.auth.email == request.resource.data.userId);
      
      // Users can update their own bookings OR admins can update any booking
      allow update: if isAuthenticated() && 
        (request.auth.uid == resource.data.userId || 
         request.auth.email == resource.data.userId ||
         isAdmin());
      
      // Users can delete their own bookings OR admins can delete any booking
      allow delete: if isAuthenticated() && 
        (request.auth.uid == resource.data.userId || 
         request.auth.email == resource.data.userId ||
         isAdmin());
    }
    
    // Access codes collection - secure access code management
    match /accessCodes/{codeId} {
      // Anyone can read access codes (needed for signup validation)
      // But in production, you might want to restrict this further
      allow read: if true;
      
      // Only admins can create access codes for their community
      allow create: if isAdmin() && 
        (request.resource.data.communityId == null || 
         belongsToCommunity(request.resource.data.communityId));
      
      // Only admins can update access codes in their community
      allow update: if isAdmin() && 
        (resource.data.communityId == null || 
         belongsToCommunity(resource.data.communityId));
      
      // Only admins can delete access codes in their community
      allow delete: if isAdmin() && 
        (resource.data.communityId == null || 
         belongsToCommunity(resource.data.communityId));
    }
    
    // Settings collection - application configuration
    match /settings/{settingId} {
      // All authenticated users can read settings
      allow read: if isAuthenticated() || request.auth == null;
      
      // Only admins can modify settings
      allow write: if isAdmin();
    }

    // QR Codes collection - booking access management
    match /qr-codes/{qrCodeId} {
      // Users can read their own QR codes OR admins can read all
      allow read: if isAuthenticated() || request.auth == null;
      
      // Users can create QR codes for their own bookings
      allow create: if isAuthenticated() && 
        (request.auth.uid == request.resource.data.userId ||
         request.auth.email == request.resource.data.userId);
      
      // Users can update their own QR codes OR admins can update any
      allow update: if isAuthenticated() && 
        (request.auth.uid == resource.data.userId || 
         request.auth.email == resource.data.userId ||
         isAdmin());
      
      // Users can delete their own QR codes OR admins can delete any
      allow delete: if isAuthenticated() && 
        (request.auth.uid == resource.data.userId || 
         request.auth.email == resource.data.userId ||
         isAdmin());
    }

    // Community Notifications collection - notification system
    match /community-notifications/{notificationId} {
      // Users can read their own notifications OR admins can read all community notifications
      allow read: if isAuthenticated() || request.auth == null;
      
      // Authenticated users can create notifications in their community
      allow create: if isAuthenticated();
      
      // Users can update/delete their own notifications OR admins can manage all
      allow update, delete: if isAuthenticated() && 
        (resource.data.targetUser == request.auth.uid || 
         resource.data.targetUser == request.auth.email ||
         isAdmin());
    }
    
    // Default deny all other collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
}